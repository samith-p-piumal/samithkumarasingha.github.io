// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";
//
// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });
//
// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });
//
// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };
//
// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );
// }
//
//

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

export const metadata: Metadata = {
    title: "Samith Kumarasingha - Portfolio",
    description: "Portfolio of Samith Kumarasingha, Software Developer & AI Enthusiast",
    icons: {
        icon: "/favicon.ico",
    },
    openGraph: {
        title: "Samith Kumarasingha - Portfolio",
        description: "Software Developer & AI Enthusiast",
        url: "https://yourportfolio.com",
        siteName: "Samith Kumarasingha",
        images: [
            {
                url: "https://yourportfolio.com/og-image.jpg",
                width: 1200,
                height: 630,
            },
        ],
        locale: "en_US",
        type: "website",
    },
    twitter: {
        card: "summary_large_image",
        title: "Samith Kumarasingha - Portfolio",
        description: "Software Developer & AI Enthusiast",
        creator: "@yourtwitterhandle",
        images: ["https://yourportfolio.com/og-image.jpg"],
    },
};

export default function RootLayout({
                                       children,
                                   }: Readonly<{
    children: React.ReactNode;
}>) {
    return (
        <html lang="en" className="scroll-smooth">
        <body
            className={`${geistSans.variable} ${geistMono.variable} antialiased bg-gray-50 text-gray-900`}
        >
        <main className="min-h-screen">
            {children}
        </main>
        </body>
        </html>
    );
}